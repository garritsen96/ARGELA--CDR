 @GET
    @Path("/{id}/fatura")
    public Response faturaHesapla(@PathParam("id") Long id) {
        Cdr cdr = cdrRepository.findByIdOptional(id).orElse(null);

        if (cdr == null) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("{\"error\":\"Bu ID ile kayıt bulunamadı\"}")
                    .build();
        }

        double fatura = cdr.faturaHesapla(cdr.getAramaSuresi(), cdr.getAramaZamani());

        return Response.ok("{\"fatura\":" + fatura + "}").build();
    }

    // Telefon numarasına göre aylık fatura hesaplama
    @GET
    @Path("/fatura/{telefonNumarasi}/{yil}/{ay}")
    public Response aylikFaturaHesapla(@PathParam("telefonNumarasi") String telefonNumarasi,
                                       @PathParam("yil") int yil,
                                       @PathParam("ay") int ay) {

        // Belirtilen ay için tarihleri belirle
        LocalDateTime ayBaslangic = LocalDateTime.of(yil, ay, 1, 0, 0, 0);
        LocalDateTime aySonu = ayBaslangic.plusMonths(1).minusSeconds(1);

        // O telefon numarasının o aydaki tüm aramalarını bul
        List<Cdr> aylikCdrler = cdrRepository.find(
            "arayanNumara = ?1 and aramaZamani >= ?2 and aramaZamani <= ?3",
            telefonNumarasi, ayBaslangic, aySonu
        ).list();

        if (aylikCdrler.isEmpty()) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("{\"error\":\"Bu telefon numarası için " + yil + "/" + ay + " ayında CDR kaydı bulunamadı\"}")
                    .build();
        }

        // Aylık toplam fatura hesapla
        double toplamFatura = 0.0;
        double toplamDakika = 0.0;
        int normalSaatAramaSayisi = 0;
        int aksamSaatAramaSayisi = 0;

        StringBuilder aramaDetaylari = new StringBuilder();
        aramaDetaylari.append("[");

        for (int i = 0; i < aylikCdrler.size(); i++) {
            Cdr cdr = aylikCdrler.get(i);
            double fatura = cdr.faturaHesapla(cdr.getAramaSuresi(), cdr.getAramaZamani());
            toplamFatura += fatura;
            toplamDakika += cdr.getAramaSuresi();

            // Arama saati kontrolü
            int saat = cdr.getAramaZamani().getHour();
            if (saat >= 19 || saat <= 7) {
                aksamSaatAramaSayisi++;
            } else {
                normalSaatAramaSayisi++;
            }

            // Arama detayını JSON'a ekle
            aramaDetaylari.append("{")
                    .append("\"id\":").append(cdr.id).append(",")
                    .append("\"aranan_numara\":\"").append(cdr.getArananNumara()).append("\",")
                    .append("\"arama_suresi\":").append(cdr.getAramaSuresi()).append(",")
                    .append("\"arama_zamani\":\"").append(cdr.getAramaZamani()).append("\",")
                    .append("\"fatura\":").append(fatura)
                    .append("}");

            if (i < aylikCdrler.size() - 1) {
                aramaDetaylari.append(",");
            }
        }
        aramaDetaylari.append("]");

        // JSON response oluştur
        String jsonResponse = "{"
                + "\"telefon_numarasi\":\"" + telefonNumarasi + "\","
                + "\"yil\":" + yil + ","
                + "\"ay\":" + ay + ","
                + "\"toplam_arama_sayisi\":" + aylikCdrler.size() + ","
                + "\"normal_saat_aramalar\":" + normalSaatAramaSayisi + ","
                + "\"aksam_saat_aramalar\":" + aksamSaatAramaSayisi + ","
                + "\"toplam_dakika\":" + toplamDakika + ","
                + "\"toplam_fatura\":" + toplamFatura + ","
                + "\"arama_detaylari\":" + aramaDetaylari.toString()
                + "}";

        return Response.ok(jsonResponse).build();
    }

    // Telefon numarasının tüm zamanlar toplamı (aylık filtre olmadan)
    @GET
    @Path("/fatura/{telefonNumarasi}")
    public Response telefonFaturasiHesapla(@PathParam("telefonNumarasi") String telefonNumarasi) {
        List<Cdr> cdrListesi = cdrRepository.find("arayanNumara", telefonNumarasi).list();

        if (cdrListesi.isEmpty()) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("{\"error\":\"Bu telefon numarası için CDR kaydı bulunamadı\"}")
                    .build();
        }

        double toplamFatura = 0.0;
        for (Cdr cdr : cdrListesi) {
            toplamFatura += cdr.faturaHesapla(cdr.getAramaSuresi(), cdr.getAramaZamani());
        }

        return Response.ok()
                .entity("{\"telefon_numarasi\":\"" + telefonNumarasi + "\"," +
                       "\"toplam_arama_sayisi\":" + cdrListesi.size() + "," +
                       "\"toplam_fatura\":" + toplamFatura + "}")
                .build();
    }
}
